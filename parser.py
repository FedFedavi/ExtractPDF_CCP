import os
import json
import pdfplumber
import re
import csv
import tkinter as tk
from tkinter import filedialog, messagebox

# –§–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
CONFIG_FILE = "config.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
def load_config():
    with open(CONFIG_FILE, encoding="utf-8") as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def limit_text(text, max_length=100):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–æ–∫, –¥–≤–æ–π–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –¥–æ max_length"""
    if not text:
        return "‚ö† –ù–ï –ù–ê–ô–î–ï–ù–û"

    clean_text = re.sub(r"\s+", " ", text).strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    return clean_text[:max_length]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

# –§—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –ø–æ `max_lines`
def merge_lines(text, max_lines):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±—Ä—ã–≤–∞–ª–∏—Å—å"""
    lines = text.split("\n")
    merged = []
    buffer = []

    for line in lines:
        if line.strip():
            buffer.append(line.strip())

        if len(buffer) >= max_lines or not line.strip():
            merged.append(" ".join(buffer))
            buffer = []

    if buffer:
        merged.append(" ".join(buffer))

    return "\n".join(merged)

# –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def extract_data_from_pdf(pdf_path, rules):
    data = {"–§–∞–π–ª": os.path.basename(pdf_path)}

    with pdfplumber.open(pdf_path) as pdf:
        raw_text = "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])

    text_joined = " ".join(raw_text.split("\n"))  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫

    if config["enable_console_log"]:
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {pdf_path}")

    for rule in rules:
        max_lines = rule.get("max_lines", 0)
        search_text = merge_lines(raw_text, max_lines) if rule.get("join_lines", True) else raw_text
        matches = re.findall(rule["regex"], search_text, re.MULTILINE)

        if matches:
            extracted_text = limit_text(matches[0], 150 if "–§–°–°–ü" in rule["name"] else 100)
            data[rule["name"]] = extracted_text
            if config["enable_console_log"]:
                print(f"‚úÖ {rule['name']}: {extracted_text}")
        else:
            data[rule["name"]] = "‚ö† –ù–ï –ù–ê–ô–î–ï–ù–û"
            if config["enable_console_log"]:
                print(f"‚ùå {rule['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    return data

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö PDF –≤ –ø–∞–ø–∫–µ
def process_pdfs_in_folder(folder_path, rules):
    pdf_files = [f for f in os.listdir(folder_path) if f.endswith(".pdf")]
    results = []

    for pdf_file in pdf_files:
        pdf_path = os.path.join(folder_path, pdf_file)
        result = extract_data_from_pdf(pdf_path, rules)
        results.append(result)

    return results

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
def open_file(path):
    if os.path.exists(path):
        os.startfile(path)
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV
def start_processing():
    folder_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å PDF")
    if not folder_path:
        return

    log_text.set("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    root.update()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    global config
    config = load_config()
    rules = config["rules"]

    results = process_pdfs_in_folder(folder_path, rules)

    if not results:
        log_text.set("‚ùå –ù–µ—Ç PDF-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    csv_path = os.path.join(folder_path, "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.csv")
    with open(csv_path, mode='w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=results[0].keys())
        writer.writeheader()
        writer.writerows(results)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
    log_text.set(f"‚úÖ –ì–æ—Ç–æ–≤–æ! CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {csv_path}")
    lbl_status.config(fg="blue", cursor="hand2")
    lbl_status.bind("<Button-1>", lambda e: open_file(csv_path))

    messagebox.showinfo("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{csv_path}")

# –°–æ–∑–¥–∞–µ–º GUI
root = tk.Tk()
root.title("–ü–∞—Ä—Å–µ—Ä PDF –æ—Ç –ø—Ä–∏—Å—Ç–∞–≤–æ–≤")
root.geometry("400x250")

log_text = tk.StringVar()
log_text.set("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å PDF")

frame = tk.Frame(root)
frame.pack(pady=20)

btn_select_folder = tk.Button(frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", command=start_processing)
btn_select_folder.pack(pady=10)

lbl_status = tk.Label(root, textvariable=log_text)
lbl_status.pack()

btn_exit = tk.Button(root, text="–í—ã—Ö–æ–¥", command=root.quit)
btn_exit.pack(pady=10)

root.mainloop()
